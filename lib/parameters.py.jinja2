# Template to take Google colab parameters and and generate a parameters.py file with python type hinting 
# and scoping based methods they're instantiated in.
# 'parameters.py' will be automatically generated. Do not edit -- rather, rerun the file "extract_colab_parameters.py"
# This is from a jinja2 template.
# example input file: Deforum_Stable_Diffusion.ipynb

class ChangeRecorder:
# This class is used to record changes to the parameters. It is used to generate a diff of the parameters
# from initialisation to customisation. Works best with objects that have a default value in __init__ as ours do 
    def __init__(self):
        self._changed_attributes = {}

    def __setattr__(self, name, value):
        if hasattr(self, name):
            self._changed_attributes[name] = value
        super().__setattr__(name, value)

    def get_changed_attributes(self):
        return self._changed_attributes.copy()

    def get_filesystem_friendly_changed_attributes(self):
        filesystem_friendly_attributes = []
        for attribute_name, attribute_value in self._changed_attributes.items():
            # Replace any invalid characters in the attribute name with underscores
            filesystem_friendly_name = attribute_name.replace(":", "_")
            # Replace any invalid characters in the attribute value with an empty string
            filesystem_friendly_value = str(attribute_value).replace(":", "").replace("--", "")
            # Concatenate the file-system friendly attribute name and value using a separator
            filesystem_friendly_string = f"{filesystem_friendly_name}:{filesystem_friendly_value}"
            filesystem_friendly_attributes.append(filesystem_friendly_string)
        # Concatenate all the transformed attribute strings using a separator
        return "--".join(filesystem_friendly_attributes)
        
{% for method in methods -%} 
class {{ method }}(ChangeRecorder):
  def __init__(self):
      super().__init__()
{%- for obj in objects -%}
  {%- if obj.method == method %}
    {%- if obj.type in ["bool","float","int"] %}
      self.{{ obj.name }}: {{ obj.type }} = {{ obj.default }}
    {%- elif obj.type is none %}
      self.{{ obj.name }} = "{{ obj.default }}"{% if obj.constraints %}  # {{ obj.constraints }}{% endif %}
    {%- else %}
      self.{{ obj.name }}: {{ obj.type }} = "{{ obj.default }}"{% if obj.constraints %}  # {{ obj.constraints }}{% endif %}
    {%- endif %}
  {%- endif %}
{%- endfor %}
{% endfor %}